# -*- coding:utf-8 -*-
"""
整数中1出现的个数
题目描述：求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,
但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,
可以很快的求出任意非负整数区间中1出现的次数（从1 到 n 中1出现的次数）。
"""
"""
思路：算法的整体思路是对每一位为1的数进行统计
以计算百位为1的个数为例：分别考虑n=31056，31156 和 31256的情况
n=31056  i=100 a=310 b=56  百位为1的个数为：(a//10)*i,
其中a//10为该为前面位数的可能次数，i为该位后面位数的可能次数
n=31156  i=100 a=311 b=56  百位为1的个数为：(a//10)*i + (b+1)
n=31256  i=100 a=312 b=56  百位为1的个数为：(a//10+1)*i
注意计算次数是不要遗忘前面位数为0的情况
"""
class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        # write code here
        count = 0
        i = 1
        while(i<=n):
            a,b = n//i, n%i
            if a%10 >=2:
                count += (a//10+1)*i
            elif a%10 == 1:
                count += a//10*i + b+1
            else:
                count += a//10*i
            i *= 10
        return count